{"version":3,"sources":["counter.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Counter","props","increment","e","setState","count","state","error","decrement","reset","className","title","bordered","style","backgroundColor","zIndex","borderRadius","this","type","shape","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"+MAqDeA,G,8DA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,UAAY,SAACC,GAET,EAAKC,SAAS,CACVC,MAAO,EAAKC,MAAMD,MAAQ,GAAK,EAAKC,MAAMD,MAAQ,EAAI,EAAKC,MAAMD,MACjEE,MAAO,EAAKD,MAAMD,OAAS,GAAK,+CAA2C,MAXhE,EAenBG,UAAY,WACR,EAAKJ,SAAS,CACVC,MAAO,EAAKC,MAAMD,MAAQ,EAAI,EAAKC,MAAMD,MAAQ,EAAI,EAAKC,MAAMD,MAChEE,MAAO,EAAKD,MAAMD,OAAS,EAAI,gDAA4C,MAlBhE,EAsBnBI,MAAQ,WACJ,EAAKL,SAAS,CACVC,MAAO,EACPE,MAAO,uDAvBX,EAAKD,MAAQ,CACTD,MAAO,EACPE,MAAO,IAJI,E,qDA8Bf,OACI,yBAAKG,UAAU,iCACX,kBAAC,IAAD,CAAMC,MAAM,oBAAoBC,UAAU,EAAMC,MAAO,CAAEC,gBAAiB,UAAWC,OAAQ,EAAGC,aAAc,IAAMN,UAAU,qBAC1H,wBAAIA,UAAU,eAAeO,KAAKX,MAAMD,OACxC,gCAAMY,KAAKX,MAAMC,MAAQU,KAAKX,MAAMC,MAAQ,IAC5C,kBAAC,IAAD,CAAQW,KAAK,UAAUC,MAAM,QAAQC,QAASH,KAAKf,WAAnD,cAHJ,OAKI,kBAAC,IAAD,CAAQgB,KAAK,SAASE,QAASH,KAAKT,UAAWE,UAAU,wBAAwBS,MAAM,SAAvF,cALJ,OAOI,kBAAC,IAAD,CAAQD,KAAK,SAASE,QAASH,KAAKR,MAAOU,MAAM,SAAjD,gB,GAxCEE,c,OCcPC,MAdf,WACE,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,qDAEb,kBAAC,EAAD,SCCYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a,kGEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.703e6e9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, Button } from 'antd';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            count: 0,\r\n            error: ''\r\n        };\r\n    }\r\n    increment = (e) => {\r\n\r\n        this.setState({\r\n            count: this.state.count < 10 ? this.state.count + 1 : this.state.count,\r\n            error: this.state.count >= 10 ? \"\\u{1F61A}Maximum value is 10 \\u{1F61A}\" : ''\r\n        });\r\n    };\r\n\r\n    decrement = () => {\r\n        this.setState({\r\n            count: this.state.count > 0 ? this.state.count - 1 : this.state.count,\r\n            error: this.state.count <= 0 ? \"\\u{1F61A}Minimum  value is 0 \\u{1F61A} \" : ''\r\n        });\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            count: 0,\r\n            error: \" \\u{1F61A}You set this value to 0 \\u{1F61A}\"\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card title=\"React Counter App\" bordered={true} style={{ backgroundColor: '#F2B69A', zIndex: 2, borderRadius: 20 }} className=\"text-center mt-5 \">\r\n                    <h2 className=\"text-center\">{this.state.count}</h2>\r\n                    <h4> {this.state.error ? this.state.error : ''}</h4>\r\n                    <Button type=\"primary\" shape=\"round\" onClick={this.increment} > Increment</Button>\r\n                     &nbsp;\r\n                    <Button type=\"dashed\" onClick={this.decrement} className='bg-success text-white' shape=\"round\"  > Decrement</Button>\r\n                        &nbsp;\r\n                    <Button type=\"danger\" onClick={this.reset} shape=\"round\" > Reset</Button>\r\n                </Card>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Counter from './counter';\r\nimport './App.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row  col-md-6 offset-md-3  justify-content-center\">\r\n\r\n        <Counter />\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}